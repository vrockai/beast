/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RelativesPanel.java
 *
 * Created on Dec 6, 2008, 10:23:12 PM
 */
package edu.tuke.beast.panel;

import edu.tuke.visu.tablemodel.JCommonModel;
import edu.tuke.beast.Beast;
import edu.tuke.beast.cortex.ContextCortex;
import edu.tuke.beast.cortex.SimilarityCortex;
import edu.tuke.beast.gui.BeastPanel;
import edu.tuke.beast.lexicon.Lexicon;
import edu.tuke.beast.token.Token;
import edu.tuke.visu.tablemodel.JCommonDefaultModel;
import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author blur
 */
public class SynonymsPanel extends BeastPanel {

    private static final long serialVersionUID = -9114326161943095708L;
    JScrollPane scrollpane = new JScrollPane();
    SimilarityCortex sc;
    SimilarityCortex.Strategy similarityStr = SimilarityCortex.Strategy.INTERSECTION;
    ContextCortex.Strategy contextStr = ContextCortex.Strategy.SUM;
    final double[] w = {1, 0, 0, 0};
    final ChartPanel chartPanel = new ChartPanel(null);
    HistogramDataset hds = new HistogramDataset();
    
 
    public SynonymsPanel(Beast beast) {
        super(beast);

        createCortex();
        initComponents();

        //this.add(chartPanel, BorderLayout.NORTH);

        setName("Relatives");
    }

    private void createCortex(){
         this.sc = new SimilarityCortex(beast.getCortex());

        PropertyChangeListener propertyChangeListener = new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent propertyChangeEvent) {
                String property = propertyChangeEvent.getPropertyName();
                if ("status".equals(property)) {

                    Integer value = (Integer) propertyChangeEvent.getNewValue();
                    jProgressBar.setValue(value);
                    jProgressBar.setString(value + "%");
                }
            }
        };

        sc.addPropertyChangeListener(propertyChangeListener);
    }

      /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelControls = new javax.swing.JPanel();
        jProgressBar = new javax.swing.JProgressBar();
        jPanelInputs = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldPhrase = new javax.swing.JTextField();
        jButtonCompute = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanelControls.setMinimumSize(new java.awt.Dimension(200, 45));
        jPanelControls.setLayout(new java.awt.BorderLayout());

        jProgressBar.setToolTipText("status of the finding relatives job");
        jProgressBar.setString("idle");
        jProgressBar.setStringPainted(true);
        jPanelControls.add(jProgressBar, java.awt.BorderLayout.NORTH);

        jPanelInputs.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("phrase:");
        jLabel6.setPreferredSize(new java.awt.Dimension(45, 24));
        jPanelInputs.add(jLabel6);

        jTextFieldPhrase.setText("input...");
        jTextFieldPhrase.setMinimumSize(new java.awt.Dimension(4, 24));
        jTextFieldPhrase.setPreferredSize(new java.awt.Dimension(80, 24));
        jTextFieldPhrase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPhraseKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldPhraseKeyReleased(evt);
            }
        });
        jPanelInputs.add(jTextFieldPhrase);

        jButtonCompute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/tango/16x16/actions/edit-find.png"))); // NOI18N
        jButtonCompute.setText("Find relatives");
        jButtonCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComputeActionPerformed(evt);
            }
        });
        jPanelInputs.add(jButtonCompute);

        jPanelControls.add(jPanelInputs, java.awt.BorderLayout.SOUTH);

        add(jPanelControls, java.awt.BorderLayout.SOUTH);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "word", "strenght"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(jTable1);

        add(jScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void getRelativesAction() {

        SwingWorker worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {               
                setEnabledAll(false);
                doGetRelatives();
                return null;
            }

            @Override
            protected void done() {
                setEnabledAll(true);
                jProgressBar.setValue(0);
                jProgressBar.setString("idle");
            }
        };
        worker.execute();

    }

    private void jTextFieldPhraseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPhraseKeyPressed

        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            getRelativesAction();
        }
}//GEN-LAST:event_jTextFieldPhraseKeyPressed

    private void jTextFieldPhraseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPhraseKeyReleased
        setValidationColor(jTextFieldPhrase);
    }//GEN-LAST:event_jTextFieldPhraseKeyReleased

    private void jButtonComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComputeActionPerformed
        getRelativesAction();
    }//GEN-LAST:event_jButtonComputeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCompute;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanelControls;
    private javax.swing.JPanel jPanelInputs;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldPhrase;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void doGetRelatives() {

        createCortex();
     
        String input = jTextFieldPhrase.getText();
        Lexicon<String> l = beast.getLexicon();

        Vector<Integer> phrase = new Vector<Integer>();
        Vector<Integer> context_phrase = new Vector<Integer>();

        for (String word : input.split(" ")) {
            phrase.add(l.getIndex(new Token<String>(word)));
        }

        if (cortex.isNgramConsensus(phrase) != phrase.size()) {
            return;
        }

        Set<Vector<Integer>> lex_words = new HashSet<Vector<Integer>>();
        for (Integer word : l.getHashMap().keySet()) {

            Vector<Integer> v = new Vector<Integer>();
            v.add(word);

            if (cortex.isNgramConsensus(v) == v.size()) {
                lex_words.add(v);
            }
        }

        logger.info("Starting relatives " + phrase + ", " + similarityStr + ", " + context_phrase + ", " + contextStr + ", " + w[0] + ", " + w[1] + ", " + w[2] + ", " + w[3] + '.');
        Map<Vector<Integer>, Double> result = sc.getRelativesInContext(phrase, similarityStr, context_phrase, contextStr, lex_words, w[0], w[1], w[2], w[3]);
        logger.info("Stoping relatives " + phrase + ", " + similarityStr + ", " + context_phrase + ", " + contextStr + ", " + w[0] + ", " + w[1] + ", " + w[2] + ", " + w[3] + '.');
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();

        int size = result.size();
        logger.debug("rsize:" + size);
        int cc = 0;

        Vector<String> columns = new Vector<String>();
        columns.add("#"); columns.add("word"); columns.add("strength");

        Class[] classes = {Integer.class, String.class, Double.class};

        JCommonDefaultModel newTabMod = new JCommonDefaultModel(columns, classes);

        for (Map.Entry<Vector<Integer>, Double> eiv : result.entrySet()) {

            jProgressBar.setValue((int) (100 * (double) (cc) / (double) (size)));
            jProgressBar.setString(cc + "/" + size);


            String token = "";

            for (Integer act_i : eiv.getKey()) {
                logger.trace("act_i:" + act_i);
                token += l.getEntry(act_i).getValue();
            }
            Vector<Object> row = new Vector<Object>();

            row.add(cc++);
            row.add(token);
            row.add(eiv.getValue());
            

            newTabMod.addRow(row);
        }
        newTabMod.sort(2,false);
        
        jTable1 = new JTable(newTabMod);
        jTable1.setAutoCreateRowSorter(true);
        jTable1.setDefaultRenderer(Double.class, new JCommonModel.DoubleRenderer());
        
        jScrollPane.setViewportView(jTable1);

    }
}
