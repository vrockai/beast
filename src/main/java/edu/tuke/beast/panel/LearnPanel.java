/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LearnPanel.java
 *
 * Created on Dec 11, 2008, 7:24:25 PM
 */
package edu.tuke.beast.panel;

import edu.tuke.beast.Beast;
import edu.tuke.beast.gui.BeastPanel;
import edu.tuke.beast.input.Input;
import edu.tuke.beast.properties.PropertiesSingelton;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.Properties;
import javax.naming.SizeLimitExceededException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import org.apache.lucene.analysis.TokenStream;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author blur
 */
public class LearnPanel extends BeastPanel {

    private static final long serialVersionUID = -133205830001661651L;
    private boolean rebuildLex = false;
    private Beast.LearnStrategy learnStrategy = Beast.LearnStrategy.STRICT;
    final XYSeries lexSeries = new XYSeries(0);
    final XYSeries asocSeries = new XYSeries((double) 0);
    final XYSeries sigSeries = new XYSeries((double) 0);
    public TokenStream tokenStream;
    public static boolean measure = true;
    int step = 100000;
    private int lexSize = 7000;
    private String lexPath = "/home/blur/Projects/Beast/lex/";
    private String corPath = "/home/blur/Projects/Beast.data/idiot.book";
    private final JFileChooser fc = new JFileChooser();

    

    /** Creates new form LearnPanel */
    public LearnPanel(Beast b) {
        initComponents();

        this.beast = b;
        // Asoc chart

        JFreeChart asocChart = ChartFactory.createXYLineChart("Associations", // Title
                "tokens read", // x-axis Label
                "asocciations count", // y-axis Label
                new XYSeriesCollection(asocSeries), // Dataset
                PlotOrientation.VERTICAL, // Plot Orientation
                true, // Show Legend
                true, // Use tooltips
                false // Configure chart to generate URLs?
                );

        ChartPanel asocChartPanel = new ChartPanel(asocChart);
        jPanelGraphs.add(asocChartPanel);

        // Significance chart

        JFreeChart sigChart = ChartFactory.createXYLineChart("Energy", // Title
                "tokens read", // x-axis Label
                "energy (sum of significance)", // y-axis Label
                new XYSeriesCollection(sigSeries), // Dataset
                PlotOrientation.VERTICAL, // Plot Orientation
                true, // Show Legend
                true, // Use tooltips
                false // Configure chart to generate URLs?
                );
        ChartPanel sigChartPanel = new ChartPanel(sigChart);
        jPanelGraphs.add(sigChartPanel);

        // Lexicon chart
        JFreeChart lexChart = ChartFactory.createXYLineChart("Lexicon", // Title
                "tokens read", // x-axis Label
                "lexicon size", // y-axis Label
                new XYSeriesCollection(lexSeries), // Dataset
                PlotOrientation.VERTICAL, // Plot Orientation
                true, // Show Legend
                true, // Use tooltips
                false // Configure chart to generate URLs?
                );

        ChartPanel lexChartPanel = new ChartPanel(lexChart);
        
        jPanelGraphs.add(lexChartPanel);

        // set the right graphs to beast, so they can be update during the learning session
        beast.setLexSeries(lexSeries);
        beast.setAsocSeries(asocSeries);
        beast.setSigSeries(sigSeries);

        // set file chooser to accept both file and directory inputs
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        initProperties();
        setName("Learn");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanelGraphs = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jProgressBar = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jButtonLex = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jCheckBoxRebuildLex = new javax.swing.JCheckBox();
        jComboBoxLearnStr = new javax.swing.JComboBox();
        jButtonCor = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabelLex = new javax.swing.JLabel();
        jTextFieldLexSize = new javax.swing.JTextField();
        jComboLexPath = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelCorpus = new javax.swing.JLabel();
        jTextFieldFasNum = new javax.swing.JTextField();
        jComboCorPath = new javax.swing.JComboBox();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanelGraphs.setLayout(new java.awt.GridLayout(3, 1));
        jPanel2.add(jPanelGraphs, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jProgressBar.setString("idle");
        jProgressBar.setStringPainted(true);
        jPanel4.add(jProgressBar, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jButtonLex.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/tango/16x16/actions/edit-find-replace.png"))); // NOI18N
        jButtonLex.setText("Build lexicon");
        jButtonLex.setMaximumSize(new java.awt.Dimension(134, 24));
        jButtonLex.setMinimumSize(new java.awt.Dimension(134, 24));
        jButtonLex.setPreferredSize(new java.awt.Dimension(134, 24));
        jButtonLex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLexActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonLex);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jSeparator2.setMinimumSize(new java.awt.Dimension(3, 10));
        jSeparator2.setPreferredSize(new java.awt.Dimension(2, 20));
        jPanel1.add(jSeparator2);

        jCheckBoxRebuildLex.setText("Recompute Lexicon");
        jCheckBoxRebuildLex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRebuildLexActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBoxRebuildLex);

        jComboBoxLearnStr.setModel(new DefaultComboBoxModel(Beast.LearnStrategy.values()));
        jComboBoxLearnStr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLearnStrActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBoxLearnStr);

        jButtonCor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/tango/16x16/actions/edit-find.png"))); // NOI18N
        jButtonCor.setText("Learn");
        jButtonCor.setMaximumSize(new java.awt.Dimension(88, 24));
        jButtonCor.setMinimumSize(new java.awt.Dimension(88, 24));
        jButtonCor.setPreferredSize(new java.awt.Dimension(88, 24));
        jButtonCor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCorActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCor);

        jButtonStop.setText("Stop");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonStop);

        jPanel4.add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabelLex.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelLex.setText("Lexicon:");
        jLabelLex.setPreferredSize(new java.awt.Dimension(50, 24));
        jPanel5.add(jLabelLex);

        jTextFieldLexSize.setText("6000");
        jTextFieldLexSize.setMinimumSize(new java.awt.Dimension(4, 24));
        jTextFieldLexSize.setPreferredSize(new java.awt.Dimension(36, 24));
        jTextFieldLexSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldLexSizeActionPerformed(evt);
            }
        });
        jPanel5.add(jTextFieldLexSize);

        jComboLexPath.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "select file.." }));
        jComboLexPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboLexPathMousePressed(evt);
            }
        });
        jComboLexPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboLexPathActionPerformed(evt);
            }
        });
        jPanel5.add(jComboLexPath);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jSeparator1.setMinimumSize(new java.awt.Dimension(3, 10));
        jSeparator1.setPreferredSize(new java.awt.Dimension(2, 20));
        jPanel5.add(jSeparator1);

        jLabelCorpus.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelCorpus.setText("Corpus:");
        jLabelCorpus.setPreferredSize(new java.awt.Dimension(48, 24));
        jPanel5.add(jLabelCorpus);

        jTextFieldFasNum.setText("4");
        jTextFieldFasNum.setEnabled(false);
        jTextFieldFasNum.setPreferredSize(new java.awt.Dimension(12, 24));
        jPanel5.add(jTextFieldFasNum);

        jComboCorPath.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "select file..." }));
        jComboCorPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboCorPathMousePressed(evt);
            }
        });
        jPanel5.add(jComboCorPath);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jSeparator3.setMinimumSize(new java.awt.Dimension(3, 10));
        jSeparator3.setPreferredSize(new java.awt.Dimension(2, 20));
        jPanel5.add(jSeparator3);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("Measuring step:");
        jLabel1.setPreferredSize(new java.awt.Dimension(99, 24));
        jPanel5.add(jLabel1);

        jTextField1.setText("1000000");
        jTextField1.setMinimumSize(new java.awt.Dimension(4, 24));
        jTextField1.setPreferredSize(new java.awt.Dimension(69, 24));
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });
        jPanel5.add(jTextField1);

        jLabel2.setText("lex Stat");
        jPanel5.add(jLabel2);

        jTextField2.setText("1000000");
        jTextField2.setMinimumSize(new java.awt.Dimension(4, 24));
        jTextField2.setPreferredSize(new java.awt.Dimension(69, 24));
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
        });
        jPanel5.add(jTextField2);

        jButton1.setText("Set");
        jButton1.setMaximumSize(new java.awt.Dimension(88, 24));
        jButton1.setMinimumSize(new java.awt.Dimension(88, 24));
        jButton1.setPreferredSize(new java.awt.Dimension(88, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton1);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Measure");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel5.add(jCheckBox1);

        jPanel4.add(jPanel5, java.awt.BorderLayout.CENTER);

        add(jPanel4, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldLexSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldLexSizeActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jTextFieldLexSizeActionPerformed

    private void jButtonCorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCorActionPerformed
                  
        try {
            File file = new File(corPath);
            Input input = new Input(file);
            input.addPropertyChangeListener(new PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    jProgressBar.setValue((Integer) evt.getNewValue());
                    jProgressBar.setString(evt.getNewValue() + "%");
                }
            });
            this.tokenStream = input.getTokenStream();
            SwingWorker worker = new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() throws Exception {
                    setEnabledAll(false);
                    jButtonStop.setEnabled(true);
                    jProgressBar.setString("working");
                    jProgressBar.setValue(0);
                    learn();
                    return null;
                }

                @Override
                protected void done() {
                    setEnabledAll(true);
                    jProgressBar.setString("idle");
                    jProgressBar.setValue(0);
                }
            };
            worker.execute();
        } catch (IOException ex) {
            ex.printStackTrace();
            logger.error(ex);
        }
}//GEN-LAST:event_jButtonCorActionPerformed

    private void jButtonLexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLexActionPerformed

        Integer ls = Integer.valueOf(jTextFieldLexSize.getText());

        if (ls != null) {
            lexSize = ls;
        }

        try {
            System.out.println("going to build lexicon of size" + lexSize);
            File file = new File(lexPath);
            Input input = new Input(file);

            input.addPropertyChangeListener(new PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    jProgressBar.setValue((Integer) evt.getNewValue());
                    jProgressBar.setString(evt.getNewValue() + "%");
                }
            });

            tokenStream = input.getTokenStream();

            SwingWorker worker = new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() throws Exception {
                    //updateButton(true);
                    setEnabledAll(false);
                    jButtonStop.setEnabled(true);
                    buildLexicon(lexSize);
                    return null;
                }

                @Override
                protected void done() {
                    //updateButton(true);
                    setEnabledAll(true);
                    jProgressBar.setString("idle");
                    jProgressBar.setValue(0);
                }
            };
            worker.execute();
        } catch (IOException ex) {
            ex.printStackTrace();
            logger.error(ex);
        }

}//GEN-LAST:event_jButtonLexActionPerformed

    private void jComboLexPathMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboLexPathMousePressed
        int state = fc.showOpenDialog(this);
        lexPath = fc.getSelectedFile().toString();

        if (state == JFileChooser.APPROVE_OPTION) {
            jComboLexPath.setModel(new javax.swing.DefaultComboBoxModel(new String[]{lexPath}));
        }

        PropertiesSingelton.getInstance().getProperties().setProperty("lexicon.path", lexPath);
    }//GEN-LAST:event_jComboLexPathMousePressed

    private void jComboCorPathMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboCorPathMousePressed
        int state = fc.showOpenDialog(this);
        corPath = fc.getSelectedFile().toString();
        
        if (state == JFileChooser.APPROVE_OPTION) {
            jComboCorPath.setModel(new javax.swing.DefaultComboBoxModel(new String[]{corPath}));
        }

        PropertiesSingelton.getInstance().getProperties().setProperty("cortex.path", corPath);
    }//GEN-LAST:event_jComboCorPathMousePressed

    private void jComboLexPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboLexPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboLexPathActionPerformed

    private void jCheckBoxRebuildLexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRebuildLexActionPerformed
        rebuildLex = jCheckBoxRebuildLex.isSelected();
        logger.debug("JCheck: " + rebuildLex);
    }//GEN-LAST:event_jCheckBoxRebuildLexActionPerformed

    private void jComboBoxLearnStrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLearnStrActionPerformed
        learnStrategy = Beast.LearnStrategy.valueOf(jComboBoxLearnStr.getSelectedItem().toString());
        logger.debug(learnStrategy);
    }//GEN-LAST:event_jComboBoxLearnStrActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        measure = jCheckBox1.isSelected();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        validateStep();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            validateStep();
        }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        beast.stop();
    }//GEN-LAST:event_jButtonStopActionPerformed

private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
// TODO add your handling code here:
}//GEN-LAST:event_jTextField2KeyPressed

    private void validateStep() {
        Integer step1 = Integer.valueOf(jTextField1.getText());
        Integer step2 = Integer.valueOf(jTextField2.getText());

        if (step1 == null) {
            jTextField1.setForeground(Color.red);
        } else {
            jTextField1.setText(String.valueOf(step1));
            jTextField1.setForeground(Color.black);
            beast.setStep(step1);
        }
        
        if (step2 == null) {
            jTextField2.setForeground(Color.red);
        } else {
            jTextField2.setText(String.valueOf(step2));
            jTextField2.setForeground(Color.black);
            beast.setStep_l(step2);
        }
    }
/*
    private void updateButton(boolean enabled) {
        jButtonLex.setEnabled(enabled);
        jButtonCor.setEnabled(enabled);
        jComboBoxLearnStr.setEnabled(enabled);
    }
*/
    public void buildLexicon(int size) throws Exception {
        beast.setMeasure(measure);
        beast.buildLexicon(tokenStream, size);
    }

    public void learn()  {
        beast.setMeasure(measure);
        try {
            beast.learn(tokenStream, beast.getLexicon(), learnStrategy, rebuildLex);
        } catch (IOException ex) {
            logger.error(ex);
        } catch (SizeLimitExceededException ex) {
            logger.error(ex);
        } catch (Exception ex) {
            logger.error(ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCor;
    private javax.swing.JButton jButtonLex;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBoxRebuildLex;
    private javax.swing.JComboBox jComboBoxLearnStr;
    private javax.swing.JComboBox jComboCorPath;
    private javax.swing.JComboBox jComboLexPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelCorpus;
    private javax.swing.JLabel jLabelLex;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelGraphs;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextFieldFasNum;
    private javax.swing.JTextField jTextFieldLexSize;
    // End of variables declaration//GEN-END:variables

    private void initProperties() {
        Properties props = PropertiesSingelton.getInstance().getProperties();
        measure = beast.isMeasure();
        step = beast.getStep();
        lexPath = props.getProperty("lexicon.path");
        corPath = props.getProperty("cortex.path");

        jComboLexPath.setModel(new javax.swing.DefaultComboBoxModel(new String[]{lexPath}));
        jComboCorPath.setModel(new javax.swing.DefaultComboBoxModel(new String[]{corPath}));
        jTextField1.setText(String.valueOf(step));
        jCheckBox1.setSelected(measure);
    }
}

