/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OperatorsPanel.java
 *
 * Created on Dec 10, 2008, 9:51:22 PM
 */
package edu.tuke.beast.panel;

import edu.tuke.beast.Beast;
import edu.tuke.beast.gui.BeastPanel;
import edu.tuke.beast.lexicon.Lexicon;
import edu.tuke.beast.token.Token;
import edu.tuke.visu.tablemodel.JCommonDefaultModel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Map;
import java.util.Vector;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;

/**
 *
 * @author blur
 */
public class OperatorsWeiPanel extends BeastPanel {

    private static final long serialVersionUID = 2771673457975002263L;
    //

    /** Creates new form OperatorsPanel */
    public OperatorsWeiPanel() {
        initComponents();
    }

    public OperatorsWeiPanel(Beast b) {
        super(b);
        initComponents();
        beast = b;
        setName("Operators");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButtonCompute = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jProgressBar1.setStringPainted(true);
        jPanel1.add(jProgressBar1, java.awt.BorderLayout.CENTER);

        jButtonCompute.setText("Compute");
        jButtonCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComputeActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCompute, java.awt.BorderLayout.PAGE_END);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jPanel2.add(jScrollPane2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jPanel2.add(jScrollPane3);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComputeActionPerformed
        computeOps();
    }//GEN-LAST:event_jButtonComputeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCompute;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables

    private void computeOps() {
        SwingWorker worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                jButtonCompute.setEnabled(false);
                findOps();
                return null;
            }

            @Override
            protected void done() {
                jButtonCompute.setEnabled(true);
                jProgressBar1.setValue(0);
                jProgressBar1.setString("idle");
            }
        };
        worker.execute();
    }

    private void findOps() {

        class Record {

            private String key;
            private double val;

            public String getKey() {
                return key;
            }

            public double getVal() {
                return val;
            }

            public Record(String k, double v) {
                key = k;
                val = v;
            }
        }

        Comparator<Record> byValueComparator = new Comparator<Record>() {
            // defines the value sort order of Record

            @Override
            public int compare(Record o1, Record o2) {
                double val = o2.getVal() - o1.getVal();

                return val > 0 ? 1 : 0;
            }
        };

        // lexicon map
        Map<Integer, Token<String>> lm = beast.getLexicon().getHashMap();
        // token rating

        double[] weights = {1d, 1d, 1d, 1d};

        int l_size = 3;
        Vector<ArrayList<Record>> lists = new Vector<ArrayList<Record>>();
        for (int i = 0; i < l_size; i++) {
            lists.add(new ArrayList<Record>());
        }

        Lexicon lexicon = beast.getLexicon();

        int size = lm.keySet().size();
        int c = 0;

        for (Integer ti : lm.keySet()) {

            int p = (int) (100 * ((double) c / (double) size));
            jProgressBar1.setValue(p);
            jProgressBar1.setToolTipText(p + "%");

            try {
                double m1 = weights[0] * beast.getRegion().getFascicle(0).getTargetTokens(ti, true).size();
                m1 += weights[1] * beast.getRegion().getFascicle(1).getTargetTokens(ti, true).size();
                m1 += weights[2] * beast.getRegion().getFascicle(2).getTargetTokens(ti, true).size();
                m1 += weights[3] * beast.getRegion().getFascicle(3).getTargetTokens(ti, true).size();

                double m2 = weights[0] * beast.getRegion().getFascicle(0).getTargetTokens(ti, false).size();
                m2 += weights[1] * beast.getRegion().getFascicle(1).getTargetTokens(ti, false).size();
                m2 += weights[2] * beast.getRegion().getFascicle(2).getTargetTokens(ti, false).size();
                m2 += weights[3] * beast.getRegion().getFascicle(3).getTargetTokens(ti, false).size();

                double occ = lexicon.getOccurences(ti);

                final String value = beast.getLexicon().getEntry(ti).getValue();

                lists.get(0).add(new Record(value, (m1 + m2)));
                lists.get(1).add(new Record(value, (Math.max(m1, m2) - Math.min(m1, m2))));
                lists.get(2).add(new Record(value, (Math.min(m1, m2) != 0 ? Math.max(m1, m2) / Math.min(m1, m2) : -1)));
            } catch (Exception ex) {
                logger.error(ex);
            }

            c++;
        }
        String[] cols = {"a+b", "a-b", "a/b"};

        Vector<JScrollPane> scrolls = new Vector<JScrollPane>();
        scrolls.add(jScrollPane1);
        scrolls.add(jScrollPane2);
        scrolls.add(jScrollPane3);

        Class[] classes = {String.class, Double.class};

        for (int i = 0; i < l_size; i++) {
            Vector<String> columns = new Vector<String>();
            
            Collections.sort(lists.get(i), byValueComparator); // actual sort
            Vector<Vector<Object>> data1 = new Vector<Vector<Object>>();
            Vector<Object> col1 = new Vector<Object>();
            columns.add("op");
            columns.add(cols[i]);

            JCommonDefaultModel newTabMod = new JCommonDefaultModel(columns, classes);
            
            for (Record r : lists.get(i)) {

                Vector<Object> v = new Vector<Object>();

                v.add(r.getKey());
                v.add(r.getVal());

                newTabMod.addRow(v);
            }
            newTabMod.sort(1,false);
            JTable jt = new JTable(newTabMod);
            jt.setAutoCreateRowSorter(true);
            scrolls.get(i).setViewportView(jt);
        }



    }
    /*
    public static void main(String s[]) {
    Cortex cortex = null;
    try {
    cortex = new Cortex("/home/vrockai/School/Beast/CORTEX");
    } catch (Exception ex) {
    logger.error(ex);
    }

    JFrame f = new JFrame("Operatorss");
    f.addWindowListener(new WindowAdapter() {

    @Override
    public void windowClosing(WindowEvent e) {
    System.exit(0);
    }
    });
    JPanel applet = new OperatorsPanel(cortex);

    f.getContentPane().add("Center", applet);
    f.pack();
    f.setVisible(true);
    }
     * */
}
