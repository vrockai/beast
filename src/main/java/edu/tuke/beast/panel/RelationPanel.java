/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RelativesPanel.java
 *
 * Created on Dec 6, 2008, 10:23:12 PM
 */
package edu.tuke.beast.panel;

import edu.tuke.visu.tablemodel.JCommonModel;
import edu.tuke.beast.Beast;
import edu.tuke.beast.cortex.SimilarityCortex;
import edu.tuke.beast.gui.BeastPanel;
import edu.tuke.beast.lexicon.Lexicon;
import edu.tuke.beast.token.Token;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;

/**
 *
 * @author blur
 */
public class RelationPanel extends BeastPanel {

    private static final long serialVersionUID = -9114326161943095708L;
    JScrollPane scrollpane = new JScrollPane();
    SimilarityCortex sc;
    final double[] w = {1, 0, 0, 0};

    /** Creates new form RelativesPanel */
    public RelationPanel() {
        initComponents();
    }

    public RelationPanel(Beast beast) {
        this.beast = beast;
        this.sc = new SimilarityCortex(cortex);

        PropertyChangeListener propertyChangeListener = new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent propertyChangeEvent) {
                String property = propertyChangeEvent.getPropertyName();
                if ("status".equals(property)) {

                    Integer value = (Integer) propertyChangeEvent.getNewValue();
                    jProgressBar.setValue(value);
                    jProgressBar.setString(value + "%");
                }
            }
        };

        sc.addPropertyChangeListener(propertyChangeListener);

        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelControls = new javax.swing.JPanel();
        jProgressBar = new javax.swing.JProgressBar();
        jPanelInputs = new javax.swing.JPanel();
        jLabelPhrase = new javax.swing.JLabel();
        jTextFieldPhrase = new javax.swing.JTextField();
        jLabelRelation = new javax.swing.JLabel();
        jTextFieldRelation = new javax.swing.JTextField();
        jToggleButtonCompute = new javax.swing.JToggleButton();
        jScrollPane = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanelControls.setMinimumSize(new java.awt.Dimension(200, 45));
        jPanelControls.setLayout(new java.awt.BorderLayout());

        jProgressBar.setToolTipText("status of the finding relatives job");
        jProgressBar.setString("idle");
        jProgressBar.setStringPainted(true);
        jPanelControls.add(jProgressBar, java.awt.BorderLayout.NORTH);

        jPanelInputs.setLayout(new java.awt.GridLayout(1, 0));

        jLabelPhrase.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPhrase.setText("phrase:");
        jPanelInputs.add(jLabelPhrase);

        jTextFieldPhrase.setText("input...");
        jTextFieldPhrase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPhraseKeyPressed(evt);
            }
        });
        jPanelInputs.add(jTextFieldPhrase);

        jLabelRelation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelRelation.setText("relation:");
        jPanelInputs.add(jLabelRelation);

        jTextFieldRelation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldRelationKeyPressed(evt);
            }
        });
        jPanelInputs.add(jTextFieldRelation);

        jToggleButtonCompute.setText("ok");
        jToggleButtonCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonComputeActionPerformed(evt);
            }
        });
        jPanelInputs.add(jToggleButtonCompute);

        jPanelControls.add(jPanelInputs, java.awt.BorderLayout.SOUTH);

        add(jPanelControls, java.awt.BorderLayout.SOUTH);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "null9", "null8"
            }
        ) {
            final Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane.setViewportView(jTable1);

        add(jScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void getRelativesAction() {

//         doGetRelatives();


        SwingWorker worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {
                jTextFieldPhrase.setEnabled(false);
                jTextFieldRelation.setEnabled(false);
                jToggleButtonCompute.setEnabled(false);
                doGetRelatives();
                return null;
            }

            @Override
            protected void done() {
                jTextFieldPhrase.setEnabled(true);
                jTextFieldRelation.setEnabled(true);
                jToggleButtonCompute.setEnabled(true);
                jProgressBar.setValue(0);
                jProgressBar.setString("idle");
            }
        };
        worker.execute();

    }

    private void jTextFieldPhraseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPhraseKeyPressed

        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            getRelativesAction();
        }
}//GEN-LAST:event_jTextFieldPhraseKeyPressed

    private void jToggleButtonComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonComputeActionPerformed
        getRelativesAction();
}//GEN-LAST:event_jToggleButtonComputeActionPerformed

    private void jTextFieldRelationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldRelationKeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            getRelativesAction();
        }
}//GEN-LAST:event_jTextFieldRelationKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelPhrase;
    private javax.swing.JLabel jLabelRelation;
    private javax.swing.JPanel jPanelControls;
    private javax.swing.JPanel jPanelInputs;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldPhrase;
    private javax.swing.JTextField jTextFieldRelation;
    private javax.swing.JToggleButton jToggleButtonCompute;
    // End of variables declaration//GEN-END:variables

    private void doGetRelatives() {

        logger.info("Starting relatives");
        String input = jTextFieldPhrase.getText();
        String context = jTextFieldRelation.getText();

        Lexicon<String> l = beast.getLexicon();


        Vector<Integer> phrase = new Vector<Integer>();

        for (String word : input.split(" ")) {
            phrase.add(l.getIndex(new Token<String>(word)));
        }

        if (cortex.isNgramConsensus(phrase) != phrase.size()) {
            return;
        }

        Set<Vector<Integer>> lex_words = new HashSet<Vector<Integer>>();
        for (Integer word : l.getHashMap().keySet()) {
        
            Vector<Integer> v = new Vector<Integer>();
            v.add(word);
        
            if (cortex.isNgramConsensus(v) == v.size()) {
                lex_words.add(v);
            }
        }


        
        Map<Vector<Integer>, Double> result = sc.getRelatives(phrase, lex_words, w[0], w[1], w[2], w[3]);
        
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();

        int size = result.size();
        
        int cc = 0;

        for (Map.Entry<Vector<Integer>, Double> eiv : result.entrySet()) {

            jProgressBar.setValue((int) (100 * (double) (cc) / (double) (size)));
            jProgressBar.setString(cc + "/" + size);
            //final Integer act_i = ei.getValue();

            String token = "";
            for (Integer act_i : eiv.getKey()) {
                token += l.getEntry(act_i).getValue();
            }
            Vector<Object> row = new Vector<Object>();

            row.add(cc++);
            row.add(token);
            row.add(eiv.getValue());
            double c_s = 0;
            row.add(c_s);
            double wei = 0;
            row.add(wei);

            data.add(row);
        }

        Vector<String> columns = new Vector<String>();
        columns.add("#");
        columns.add("word");
        columns.add("strength");

        
        Class[] classes = {Integer.class, String.class, Double.class, Double.class, Double.class};

        jTable1 = new JTable(new JCommonModel(data, columns, classes));
        jTable1.setAutoCreateRowSorter(true);

        jTable1.setDefaultRenderer(Double.class, new JCommonModel.DoubleRenderer());

        jScrollPane.setViewportView(jTable1);
    }
    /*
    public static void main(String s[]) {


    Cortex cortex = null;
    try {
    cortex = new Beast("/home/blur/Projects/Beast.data/cortex/CORTEX");
    } catch (Exception ex) {
    ex.printStackTrace();
    }

    try {
    JFrame f = new JFrame("ShapesDemo2D");
    f.addWindowListener(new WindowAdapter() {

    @Override
    public void windowClosing(WindowEvent e) {
    System.exit(0);
    }
    });


    JPanel applet = new RelativesPanel(cortex);

    f.getContentPane().add("Center", applet);
    //applet.init();
    f.pack();

    f.setVisible(true);
    } catch (Exception e) {
    e.printStackTrace();
    }
    }
     * */
}
