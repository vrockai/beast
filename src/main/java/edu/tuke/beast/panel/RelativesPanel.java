/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RelativesPanel.java
 *
 * Created on Dec 6, 2008, 10:23:12 PM
 */
package edu.tuke.beast.panel;


import edu.tuke.visu.tablemodel.JCommonModel;
import edu.tuke.beast.Beast;
import edu.tuke.beast.cortex.ContextCortex;
import edu.tuke.beast.cortex.SimilarityCortex;
import edu.tuke.beast.gui.BeastPanel;
import edu.tuke.beast.lexicon.Lexicon;
import edu.tuke.beast.properties.PropertiesSingelton;
import edu.tuke.beast.token.Token;
import edu.tuke.beast.wordnet.WordnetParser;
import edu.tuke.visu.tablemodel.JCommonDefaultModel;
import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import net.didion.jwnl.JWNLException;
import net.didion.jwnl.data.Pointer;
import net.didion.jwnl.data.PointerType;
import net.didion.jwnl.data.Synset;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author blur
 */
public class RelativesPanel extends BeastPanel {

    private static final long serialVersionUID = -9114326161943095708L;
    JScrollPane scrollpane = new JScrollPane();
    SimilarityCortex sc;
    SimilarityCortex.Strategy similarityStr = SimilarityCortex.Strategy.INTERSECTION;
    ContextCortex.Strategy contextStr = ContextCortex.Strategy.SUM;
    final double[] w = {1, 0, 0, 0};
    final ChartPanel chartPanel = new ChartPanel(null);
    HistogramDataset hds = new HistogramDataset();

    //String wordnetpath = PropertiesSingelton.getInstance().getProperties().getProperty("wn.prop.path");
    //WordnetParser wp;
    
    public void setStrategies() {

        String simStr = jComboBoxSimilarityStr.getSelectedItem().toString();
        String conStr = jComboBoxContextStr.getSelectedItem().toString();

        logger.debug("S-STR: " + jComboBoxSimilarityStr.getSelectedItem());
        logger.debug("C-STR: " + jComboBoxContextStr.getSelectedItem());

        similarityStr = SimilarityCortex.Strategy.valueOf(simStr);
        contextStr = ContextCortex.Strategy.valueOf(conStr);

        sc.setStrategy(similarityStr);
        

    }
/*
   
    public RelativesPanel() {
        initComponents();
        setStrategies();
        loadProperties();
    }
*/
    public RelativesPanel(Beast beast) {
        super(beast);

        createCortex();
        initComponents();
        setStrategies();
        loadProperties();

        //this.add(chartPanel, BorderLayout.NORTH);

        setName("Relatives");
    }

    private void createCortex(){
         this.sc = new SimilarityCortex(beast.getCortex());

        PropertyChangeListener propertyChangeListener = new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent propertyChangeEvent) {
                String property = propertyChangeEvent.getPropertyName();
                if ("status".equals(property)) {

                    Integer value = (Integer) propertyChangeEvent.getNewValue();
                    jProgressBar.setValue(value);
                    jProgressBar.setString(value + "%");
                }
            }
        };

        sc.addPropertyChangeListener(propertyChangeListener);
    }

    private void loadProperties() {
        jTextFieldW1.setText(properties.getProperty("beast.panel.relatives.w0"));
        jTextFieldW2.setText(properties.getProperty("beast.panel.relatives.w1"));
        jTextFieldW3.setText(properties.getProperty("beast.panel.relatives.w2"));
        jTextFieldW4.setText(properties.getProperty("beast.panel.relatives.w3"));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelControls = new javax.swing.JPanel();
        jProgressBar = new javax.swing.JProgressBar();
        jPanelWeights = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldW1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldW2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldW3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldW4 = new javax.swing.JTextField();
        jButtonSetWeights = new javax.swing.JButton();
        jPanelInputs = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldPhrase = new javax.swing.JTextField();
        jComboBoxSimilarityStr = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldContext = new javax.swing.JTextField();
        jComboBoxContextStr = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jButtonCompute = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanelControls.setMinimumSize(new java.awt.Dimension(200, 45));
        jPanelControls.setLayout(new java.awt.BorderLayout());

        jProgressBar.setToolTipText("status of the finding relatives job");
        jProgressBar.setString("idle");
        jProgressBar.setStringPainted(true);
        jPanelControls.add(jProgressBar, java.awt.BorderLayout.NORTH);

        jPanelWeights.setMinimumSize(new java.awt.Dimension(263, 25));
        jPanelWeights.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("w1:");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanelWeights.add(jLabel1);

        jTextFieldW1.setText("1");
        jTextFieldW1.setMinimumSize(new java.awt.Dimension(4, 24));
        jTextFieldW1.setPreferredSize(new java.awt.Dimension(40, 24));
        jTextFieldW1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldW1KeyPressed(evt);
            }
        });
        jPanelWeights.add(jTextFieldW1);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("w2:");
        jPanelWeights.add(jLabel2);

        jTextFieldW2.setText("0");
        jTextFieldW2.setMinimumSize(new java.awt.Dimension(4, 24));
        jTextFieldW2.setPreferredSize(new java.awt.Dimension(40, 24));
        jTextFieldW2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldW2ActionPerformed(evt);
            }
        });
        jTextFieldW2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldW2KeyPressed(evt);
            }
        });
        jPanelWeights.add(jTextFieldW2);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("w3:");
        jPanelWeights.add(jLabel3);

        jTextFieldW3.setText("0");
        jTextFieldW3.setMinimumSize(new java.awt.Dimension(4, 24));
        jTextFieldW3.setPreferredSize(new java.awt.Dimension(40, 24));
        jTextFieldW3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldW3KeyPressed(evt);
            }
        });
        jPanelWeights.add(jTextFieldW3);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("w4:");
        jPanelWeights.add(jLabel4);

        jTextFieldW4.setText("0");
        jTextFieldW4.setMinimumSize(new java.awt.Dimension(4, 24));
        jTextFieldW4.setPreferredSize(new java.awt.Dimension(40, 24));
        jTextFieldW4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldW4ActionPerformed(evt);
            }
        });
        jTextFieldW4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldW4KeyPressed(evt);
            }
        });
        jPanelWeights.add(jTextFieldW4);

        jButtonSetWeights.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/tango/16x16/actions/view-fullscreen.png"))); // NOI18N
        jButtonSetWeights.setText("Set weights");
        jButtonSetWeights.setToolTipText("Set weights");
        jButtonSetWeights.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButtonSetWeights.setMaximumSize(new java.awt.Dimension(107, 24));
        jButtonSetWeights.setMinimumSize(new java.awt.Dimension(107, 24));
        jButtonSetWeights.setPreferredSize(new java.awt.Dimension(140, 24));
        jButtonSetWeights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetWeightsActionPerformed(evt);
            }
        });
        jPanelWeights.add(jButtonSetWeights);

        jPanelControls.add(jPanelWeights, java.awt.BorderLayout.CENTER);

        jPanelInputs.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("phrase:");
        jLabel6.setPreferredSize(new java.awt.Dimension(45, 24));
        jPanelInputs.add(jLabel6);

        jTextFieldPhrase.setText("input...");
        jTextFieldPhrase.setMinimumSize(new java.awt.Dimension(4, 24));
        jTextFieldPhrase.setPreferredSize(new java.awt.Dimension(80, 24));
        jTextFieldPhrase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPhraseKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldPhraseKeyReleased(evt);
            }
        });
        jPanelInputs.add(jTextFieldPhrase);

        jComboBoxSimilarityStr.setModel(new DefaultComboBoxModel(SimilarityCortex.Strategy.values()));
        jComboBoxSimilarityStr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSimilarityStrActionPerformed(evt);
            }
        });
        jPanelInputs.add(jComboBoxSimilarityStr);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(5, 24));
        jPanelInputs.add(jSeparator1);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("context:");
        jLabel5.setPreferredSize(new java.awt.Dimension(49, 24));
        jPanelInputs.add(jLabel5);

        jTextFieldContext.setMinimumSize(new java.awt.Dimension(20, 24));
        jTextFieldContext.setPreferredSize(new java.awt.Dimension(80, 24));
        jTextFieldContext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldContextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldContextKeyReleased(evt);
            }
        });
        jPanelInputs.add(jTextFieldContext);

        jComboBoxContextStr.setModel(new DefaultComboBoxModel(ContextCortex.Strategy.values()));
        jComboBoxContextStr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxContextStrActionPerformed(evt);
            }
        });
        jPanelInputs.add(jComboBoxContextStr);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel7.setText("gamma:");
        jPanelInputs.add(jLabel7);

        jTextField1.setText("1.00000");
        jPanelInputs.add(jTextField1);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(5, 24));
        jPanelInputs.add(jSeparator2);

        jButtonCompute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/tango/16x16/actions/edit-find.png"))); // NOI18N
        jButtonCompute.setText("Find relatives");
        jButtonCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComputeActionPerformed(evt);
            }
        });
        jPanelInputs.add(jButtonCompute);

        jPanelControls.add(jPanelInputs, java.awt.BorderLayout.SOUTH);

        add(jPanelControls, java.awt.BorderLayout.SOUTH);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "word", "strenght"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(jTable1);

        add(jScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void getRelativesAction() {
/*
        SwingWorker worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {
                
                jTextFieldPhrase.setEnabled(false);
                jTextFieldContext.setEnabled(false);
                jButtonCompute.setEnabled(false);
                
                setEnabledAll(false);
                doGetRelatives();
                return null;
            }

            @Override
            protected void done() {
                
                jTextFieldPhrase.setEnabled(true);
                jTextFieldContext.setEnabled(true);
                jButtonCompute.setEnabled(true);
                 
                setEnabledAll(true);
                jProgressBar.setValue(0);
                jProgressBar.setString("idle");
            }
        };
        worker.execute();
*/
       doGetRelatives();
    }

    private void jTextFieldPhraseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPhraseKeyPressed

        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            getRelativesAction();
        }
}//GEN-LAST:event_jTextFieldPhraseKeyPressed

    private void jTextFieldPhraseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPhraseKeyReleased
        setValidationColor(jTextFieldPhrase);
    }//GEN-LAST:event_jTextFieldPhraseKeyReleased

    private void jButtonComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComputeActionPerformed
        getRelativesAction();
    }//GEN-LAST:event_jButtonComputeActionPerformed

    private void jComboBoxSimilarityStrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSimilarityStrActionPerformed
        setStrategies();
}//GEN-LAST:event_jComboBoxSimilarityStrActionPerformed

    private void jComboBoxContextStrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxContextStrActionPerformed
        setStrategies();
}//GEN-LAST:event_jComboBoxContextStrActionPerformed

    private void jTextFieldContextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldContextKeyReleased
        setValidationColor(jTextFieldContext);
}//GEN-LAST:event_jTextFieldContextKeyReleased

    private void jTextFieldContextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldContextKeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            getRelativesAction();
        }
}//GEN-LAST:event_jTextFieldContextKeyPressed

    private void jButtonSetWeightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetWeightsActionPerformed
        w[0] = Double.parseDouble(jTextFieldW1.getText());
        w[1] = Double.parseDouble(jTextFieldW2.getText());
        w[2] = Double.parseDouble(jTextFieldW3.getText());
        w[3] = Double.parseDouble(jTextFieldW4.getText());

        jTextFieldW1.setText(String.valueOf(w[0]));
        jTextFieldW2.setText(String.valueOf(w[1]));
        jTextFieldW3.setText(String.valueOf(w[2]));
        jTextFieldW4.setText(String.valueOf(w[3]));

        properties.setProperty("beast.panel.relatives.w0", String.valueOf(w[0]));
        properties.setProperty("beast.panel.relatives.w1", String.valueOf(w[1]));
        properties.setProperty("beast.panel.relatives.w2", String.valueOf(w[2]));
        properties.setProperty("beast.panel.relatives.w3", String.valueOf(w[3]));
}//GEN-LAST:event_jButtonSetWeightsActionPerformed

    private void jTextFieldW4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldW4KeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            w[3] = Double.parseDouble(jTextFieldW4.getText());
            jTextFieldW4.setText(String.valueOf(w[3]));
        }
}//GEN-LAST:event_jTextFieldW4KeyPressed

    private void jTextFieldW4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldW4ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jTextFieldW4ActionPerformed

    private void jTextFieldW3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldW3KeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            w[2] = Double.parseDouble(jTextFieldW3.getText());
            jTextFieldW3.setText(String.valueOf(w[2]));
        }
}//GEN-LAST:event_jTextFieldW3KeyPressed

    private void jTextFieldW2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldW2KeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            w[1] = Double.parseDouble(jTextFieldW2.getText());
            jTextFieldW2.setText(String.valueOf(w[1]));
        }
}//GEN-LAST:event_jTextFieldW2KeyPressed

    private void jTextFieldW2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldW2ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jTextFieldW2ActionPerformed

    private void jTextFieldW1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldW1KeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            w[0] = Double.parseDouble(jTextFieldW1.getText());
            jTextFieldW1.setText(String.valueOf(w[0]));
        }
}//GEN-LAST:event_jTextFieldW1KeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCompute;
    private javax.swing.JButton jButtonSetWeights;
    private javax.swing.JComboBox jComboBoxContextStr;
    private javax.swing.JComboBox jComboBoxSimilarityStr;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanelControls;
    private javax.swing.JPanel jPanelInputs;
    private javax.swing.JPanel jPanelWeights;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextFieldContext;
    private javax.swing.JTextField jTextFieldPhrase;
    private javax.swing.JTextField jTextFieldW1;
    private javax.swing.JTextField jTextFieldW2;
    private javax.swing.JTextField jTextFieldW3;
    private javax.swing.JTextField jTextFieldW4;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void doGetRelatives() {
/*
        try{
      //      System.out.println(wordnetpath);
            System.out.println(beast.getLexicon());
       //  wp = new WordnetParser(wordnetpath, beast.getLexicon());
        }catch(JWNLException e){
            e.printStackTrace();
        }catch(FileNotFoundException e){
            e.printStackTrace();
        }

        Map<Synset, Integer> synsetMap = new HashMap<Synset, Integer>();
*/
        Double gamma = Double.parseDouble(jTextField1.getText());
        

        createCortex();
        setStrategies();

        String input = jTextFieldPhrase.getText();
        String context = jTextFieldContext.getText();

        Lexicon<String> l = beast.getLexicon();

        //Integer context_id = l.getIndex(new Token<String>(context));

        Vector<Integer> phrase = new Vector<Integer>();
        Vector<Integer> context_phrase = new Vector<Integer>();

        for (String word : input.split(" ")) {
            phrase.add(l.getIndex(new Token<String>(word)));
        }

        for (String word : context.split(" ")) {
            context_phrase.add(l.getIndex(new Token<String>(word)));
        }

        if (cortex.isNgramConsensus(phrase) != phrase.size()) {
            return;
        }

        Set<Vector<Integer>> lex_words = new HashSet<Vector<Integer>>();
        for (Integer word : l.getHashMap().keySet()) {

            Vector<Integer> v = new Vector<Integer>();
            v.add(word);

            if (cortex.isNgramConsensus(v) == v.size()) {
                lex_words.add(v);
            }
        }

        logger.info("Starting relatives " + phrase + ", " + similarityStr + ", " + context_phrase + ", " + contextStr + ", " + w[0] + ", " + w[1] + ", " + w[2] + ", " + w[3] + '.');
        sc.setGamma(gamma);
        Map<Vector<Integer>, Double> result = sc.getRelativesInContext(phrase, similarityStr, context_phrase, contextStr, lex_words, w[0], w[1], w[2], w[3]);
        logger.info("Stoping relatives " + phrase + ", " + similarityStr + ", " + context_phrase + ", " + contextStr + ", " + w[0] + ", " + w[1] + ", " + w[2] + ", " + w[3] + '.');
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();

        int size = result.size();
        logger.debug("rsize:" + size);
        int cc = 0;

        Vector<String> columns = new Vector<String>();
        columns.add("#"); columns.add("word"); columns.add("strength");columns.add("synsets");

        Class[] classes = {Integer.class, String.class, Double.class, String.class};

        JCommonDefaultModel newTabMod = new JCommonDefaultModel(columns, classes);


        /*
        final XYSeries lexSeries = new XYSeries(0);
        List<Double> d_list = new ArrayList<Double>();
*/
        for (Map.Entry<Vector<Integer>, Double> eiv : result.entrySet()) {

            jProgressBar.setValue((int) (100 * (double) (cc) / (double) (size)));
            jProgressBar.setString(cc + "/" + size);
            //final Integer act_i = ei.getValue();

            String token = "";
            String synsets = "";
/*
            try{
                Synset[] syns = wp.getSynsets(eiv.getKey().get(0));
                if (syns !=null)
                for (Synset syn : syns){
                    
                    Pointer[] pointerArr = syn.getPointers(PointerType.HYPERNYM);
                    for(Pointer p: pointerArr){
                    synsets += p.getTargetSynset().toString() + ", ";
                    }

                    if (synsetMap.containsKey(syn))
                    {
                        Integer c = synsetMap.get(syn);
                        synsetMap.put(syn, c++);
                    }
                    else {
                        synsetMap.put(syn, 1);
                    }
                }

            }catch(Exception e){
                e.printStackTrace();
            }

*/
            for (Integer act_i : eiv.getKey()) {
                logger.trace("act_i:" + act_i);
                token += l.getEntry(act_i).getValue();
            }
            Vector<Object> row = new Vector<Object>();

            row.add(cc++);
            row.add(token);
            row.add(eiv.getValue());
            row.add(synsets);
           /* d_list.add(eiv.getValue());*/
            

            newTabMod.addRow(row);
        }
/*
        Collections.sort(d_list);
        for(int c=1;c<d_list.size(); c++)
            lexSeries.add(c, d_list.get(c) - d_list.get(c-1));
*/
        newTabMod.sort(2,false);
        
        jTable1 = new JTable(newTabMod);
        jTable1.setAutoCreateRowSorter(true);
        jTable1.setDefaultRenderer(Double.class, new JCommonModel.DoubleRenderer());
        
        jScrollPane.setViewportView(jTable1);
        /*
        JFreeChart chart = ChartFactory.createXYLineChart("Lexicon", // Title
                "tokens read", // x-axis Label
                "lexicon size", // y-axis Label
                new XYSeriesCollection(lexSeries), // Dataset
                PlotOrientation.VERTICAL, // Plot Orientation
                true, // Show Legend
                true, // Use tooltips
                false // Configure chart to generate URLs?
                );
        chartPanel.setChart(chart);*/
        //System.out.println(synsetMap);
/*
        Iterator<Synset> sit = synsetMap.keySet().iterator();
        Synset first = sit.next();
        Synset act;
        Integer max = synsetMap.get(first);

        do {
            act = sit.next();
            if (synsetMap.get(first) > max){
                first = act;
                max = synsetMap.get(first);
            }
        } while(sit.hasNext());

        System.out.println(first + ": " + max);
*/
    }
}
