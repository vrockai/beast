/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LexiconPanel.java
 *
 * Created on Dec 7, 2008, 5:27:36 AM
 */
package edu.tuke.beast.panel;

import edu.tuke.visu.tablemodel.JCommonModel;
import edu.tuke.beast.Beast;
import edu.tuke.beast.gui.BeastPanel;
import edu.tuke.beast.lexicon.Lexicon;
import edu.tuke.beast.token.Token;
import java.awt.BorderLayout;
import java.util.Map.Entry;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.statistics.HistogramDataset;

/**
 *
 * @author blur
 */
public class LexiconPanel extends BeastPanel {

    private static final long serialVersionUID = -1468013644805196189L;
    JFreeChart chart;
    final ChartPanel chartPanel = new ChartPanel(null);
    HistogramDataset hds = new HistogramDataset();

    public LexiconPanel(Beast beast) {
        super(beast);
        initComponents();
        this.beast = beast;

        addHisto();

        chart = ChartFactory.createHistogram("Word frequency", "frequency", "count", hds, PlotOrientation.VERTICAL, false, false, false);

        chartPanel.setChart(chart);
        this.add(chartPanel, BorderLayout.CENTER);

        setName("Lexicon");
    }

    private void addHisto() {
        Lexicon<String> l = beast.getLexicon();

        Vector<String> columns = new Vector<String>();
        columns.add("#");
        columns.add("word");
        columns.add("occurence");


        Vector<Vector<Object>> data = new Vector<Vector<Object>>();

        Vector<Double> dataset = new Vector<Double>();
        int c = 0;
        for (Entry<Integer, Token<String>> entry : l.getHashMap().entrySet()) {
            Vector<Object> row = new Vector<Object>();
            row.add(entry.getKey());
            row.add(entry.getValue().getValue());

            try {
                row.add(l.getOccurences(entry.getKey()));
                dataset.add((double) l.getOccurences(entry.getKey()));
            } catch (Exception ex) {
                row.add(-1);
                Logger.getLogger(LexiconPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            data.add(row);
        }

        int k = 0;
        double[] dataset_d = new double[dataset.size()];
        for (Double d : dataset) {
            dataset_d[k] = dataset.get(k++);
        }

        Class[] classes = {Integer.class, String.class, Integer.class};
        jTable1 = new JTable(new JCommonModel(data, columns, classes));
        jTable1.setAutoCreateRowSorter(true);
        jScrollPane1.setViewportView(jTable1);
        hds = new HistogramDataset();
        hds.addSeries(0, dataset_d, 300);
        chart = ChartFactory.createHistogram("Word frequency", "frequency", "count", hds, PlotOrientation.VERTICAL, false, false, false);

        chartPanel.setChart(chart);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "#", "word", "occurs"
            }
        ) {
            final Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, java.awt.BorderLayout.NORTH);

        jButton1.setText("refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addHisto();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
/*
    public static void main(String s[]) {
    
    Cortex cortex = null;
    try {
    cortex = new Cortex("/home/blur/Projects/Beast.data/cortex/CORTEX");
    } catch (Exception ex) {
    Logger.getLogger(BeastGui.class.getName()).log(Level.SEVERE, null, ex);
    }

    JFrame f = new JFrame("PhrasePanel");
    f.addWindowListener(new WindowAdapter() {

    public void windowClosing(WindowEvent e) {
    System.exit(0);
    }
    });
    JPanel applet = new LexiconPanel(cortex);

    f.getContentPane().add("Center", applet);

    f.pack();

    f.setVisible(true);
    }
     * */
}
