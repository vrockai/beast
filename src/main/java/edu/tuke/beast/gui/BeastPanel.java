/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BeastPanel.java
 *
 * Created on May 23, 2009, 8:44:13 PM
 */
package edu.tuke.beast.gui;

import edu.tuke.beast.Beast;
import edu.tuke.beast.cortex.Cortex;
import edu.tuke.beast.lexicon.Lexicon;
import edu.tuke.beast.properties.PropertiesSingelton;
import edu.tuke.beast.token.Token;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.util.Properties;
import javax.swing.JTextField;
import org.apache.log4j.Logger;

/**
 *
 * @author blur
 */
public class BeastPanel extends javax.swing.JPanel {

    public static final Logger logger = Logger.getRootLogger();
    private static final long serialVersionUID = -7800168538571778152L;

    protected Beast beast;
    protected Cortex cortex;
    protected final Properties properties;

    public Beast getBeast() {
        return beast;
    }

    public void setBeast(Beast beast) {
        this.beast = beast;
        this.cortex = beast.getCortex();
    }

    /** Creates new form BeastPanel */
    public BeastPanel() {
        initComponents();
        properties = PropertiesSingelton.getInstance().getProperties();
    }

    public BeastPanel(Beast b) {
        initComponents();
        this.setBeast(b);
        properties = PropertiesSingelton.getInstance().getProperties();
    }

    protected boolean validateInput(String input){
        Lexicon<String> l = beast.getLexicon();
        Integer index  = l.getIndex(new Token<String>(input));
        Integer nullin = Lexicon.NULL_INDEX;
        return !nullin.equals(index);
    }

    protected void setValidationColor (JTextField jTextField){
        boolean isValid = validateInput(jTextField.getText());

        if (isValid)
            jTextField.setForeground(Color.black);
        else
            jTextField.setForeground(Color.red);
    }

    protected void setEnabledAll(boolean enabled) {
        setEnabledComponent(this, enabled);
    }
 
    protected void setEnabledComponent(Container c, boolean enabled) {
        Component[] components = c.getComponents();

        for (Component component : components) {
            logger.trace("Set: " + component + " - " + enabled);

            if (component instanceof Container) {
                setEnabledComponent((Container) component, enabled);
            } else {
                component.setEnabled(enabled);
            }

            component.setEnabled(enabled);
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
