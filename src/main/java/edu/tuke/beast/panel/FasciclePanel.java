/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OperatorsPanel.java
 *
 * Created on Dec 10, 2008, 9:51:22 PM
 */
package edu.tuke.beast.panel;

import edu.tuke.visu.tablemodel.JCommonModel;
import edu.tuke.beast.Beast;
import edu.tuke.beast.fascicle.Fascicle;
import edu.tuke.beast.gui.BeastPanel;
import edu.tuke.beast.lexicon.Lexicon;
import edu.tuke.beast.token.Token;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.SwingWorker;

/**
 *
 * @author blur
 */
public class FasciclePanel extends BeastPanel {

    private static final long serialVersionUID = 5858320249948257733L;
    private boolean dir = true;

    /** Creates new form OperatorsPanel */
    public FasciclePanel() {
        initComponents();
    }

    public FasciclePanel(Beast b) {
        super(b);
        initComponents();
        beast = b;
        setName("Fascicles");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jSlider1 = new javax.swing.JSlider();
        jButtonCompute = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jProgressBar1.setStringPainted(true);
        jPanel1.add(jProgressBar1, java.awt.BorderLayout.NORTH);

        jSlider1.setMajorTickSpacing(1);
        jSlider1.setMaximum(3);
        jSlider1.setPaintLabels(true);
        jSlider1.setSnapToTicks(true);
        jPanel1.add(jSlider1, java.awt.BorderLayout.LINE_END);

        jButtonCompute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/tango/16x16/actions/system-search.png"))); // NOI18N
        jButtonCompute.setText("Compute");
        jButtonCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComputeActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCompute, java.awt.BorderLayout.PAGE_END);
        jPanel1.add(jTextField1, java.awt.BorderLayout.CENTER);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("jCheckBox1");
        jCheckBox1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jCheckBox1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jCheckBox1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox1, java.awt.BorderLayout.CENTER);

        jButton1.setText("to file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, java.awt.BorderLayout.LINE_START);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComputeActionPerformed
       try {
            computeOps();
        } catch (Exception ex) {
            Logger.getLogger(FasciclePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonComputeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

         try {
            final int d = jSlider1.getValue();

          saveFascicle(d);
        } catch (Exception ex) {
            Logger.getLogger(FasciclePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        dir = jCheckBox1.isSelected();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCompute;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void computeOps() {

        SwingWorker worker = new SwingWorker<Void, Void>() {

            final int d = jSlider1.getValue();

            @Override
            protected Void doInBackground() throws Exception {
                jButtonCompute.setEnabled(false);
                try {
                    showFascicle(d);
                } catch (Exception e) {
                    logger.error(e);
                    logger.error(e.getCause());
                    logger.error(e.getMessage());
                    for (StackTraceElement ste : e.getStackTrace()) {
                        logger.error(ste);
                    }
                }

                return null;
            }

            @Override
            protected void done() {
                jButtonCompute.setEnabled(true);
                jProgressBar1.setValue(0);
                jProgressBar1.setString("idle");
            }
        };
        worker.execute();

    }

    private void showFascicle(int d) {

        Fascicle f = beast.getRegion().getFascicle(d);

        logger.debug("Strategy :" + f.getStrategy());

        Lexicon<String> l = beast.getLexicon();
        Set<Integer> lex = l.getHashMap().keySet();
        int c = 0;

        Vector<Vector<Object>> data = new Vector<Vector<Object>>();

        int size = lex.size() * lex.size();
        double tres = cortex.getTreshold();

        Integer t1Int = l.getIndex(new Token<String>(jTextField1.getText()));
        logger.debug("Showing F, tres: " + tres);
        if (t1Int.equals(Lexicon.NULL_INDEX)) {
            logger.debug("Whole lexicon");
            for (Integer i : lex) {
                for (Integer j : lex) {
                    c++;
                    int p = (int) (100 * ((double) c / (double) size));
                    jProgressBar1.setValue(p);
                    jProgressBar1.setToolTipText(p + "%");

                    double sig = f.getSignificance(i, j);

                    boolean go = dir ? sig < tres && sig > 0 : sig > tres;

                    if (go) {
                        continue;
                    }

                    double wei = f.getWeigth(i, j);
                    double wei_i = f.getWeigthInv(i, j);


                    String t1 = l.getEntry(i).getValue();
                    String t2 = l.getEntry(j).getValue();
                    Vector<Object> row = new Vector<Object>();

                    row.add(t1 + ' ' + t2);
                    row.add(sig);
                    row.add(wei);
                  //  row.add(sig == 0 ? 0d : wei / sig);
                  //  row.add(wei == 0 ? 0d : sig / wei);

                  //  row.add(wei-wei_i);
                  //  row.add(Math.abs(wei-wei_i));
                    data.add(row);
                }
            }
        } else {
            logger.debug("Only " + t1Int);
            size = lex.size();
            for (Integer j : lex) {
                c++;
                int p = (int) (100 * ((double) c / (double) size));
                jProgressBar1.setValue(p);
                jProgressBar1.setToolTipText(p + "%");



                String t1 = l.getEntry(t1Int).getValue();
                String t2 = l.getEntry(j).getValue();

                double sig = f.getSignificance(t1Int, j);

                boolean go = dir ? sig > tres : sig < tres && sig > 0;

                if (go) {
                    double wei = f.getWeigth(t1Int, j);
                    double wei_i = f.getWeigthInv(t1Int, j);
                    Vector<Object> row = new Vector<Object>();
                    row.add(t1 + ' ' + t2);
                    row.add(sig);
                    row.add(wei);
                  //  row.add(sig == 0 ? 0d : wei / sig);
                  //  row.add(wei == 0 ? 0d : sig / wei);

                  //  row.add(wei-wei_i);
                  //  row.add(Math.abs(wei-wei_i));
                    
                    data.add(row);
                }
            }
        }

        logger.debug("Result size :" + data.size());

        Vector<String> columns = new Vector<String>();

        columns.add("pair");
        columns.add("significance");
        columns.add("weight");
       // columns.add("significance/weight");
       // columns.add("weight/significance");
       // columns.add("delta_w");
        //columns.add("abs_delta_w");
        Class[] classes = {String.class, Double.class, Double.class};//, Double.class, Double.class, Double.class, Double.class};
        jTable1 = new JTable(new JCommonModel(data, columns, classes));
        jTable1.setDefaultRenderer(Double.class, new JCommonModel.DoubleRenderer());
        jTable1.setAutoCreateRowSorter(true);
        jScrollPane1.setViewportView(jTable1);
    }

    private void saveFascicle(int d) throws IOException {

        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("f"+d+".csv")));

        Fascicle f = beast.getRegion().getFascicle(d);

        logger.debug("Strategy :" + f.getStrategy());

        Lexicon<String> l = beast.getLexicon();
        Set<Integer> lex = l.getHashMap().keySet();
        int c = 0;

       // Vector<Vector<Object>> data = new Vector<Vector<Object>>();

        int size = lex.size() * lex.size();
        double tres = cortex.getTreshold();

        Integer t1Int = l.getIndex(new Token<String>(jTextField1.getText()));
        logger.debug("Showing F, tres: " + tres);
        if (t1Int.equals(Lexicon.NULL_INDEX)) {
            logger.debug("Whole lexicon");
            for (Integer i : lex) {
                for (Integer j : lex) {
                    c++;
                    int p = (int) (100 * ((double) c / (double) size));
                    jProgressBar1.setValue(p);
                    jProgressBar1.setToolTipText(p + "%");

                    double sig = f.getSignificance(i, j);

                    if (sig < tres) {
                        continue;
                    }

                    double wei = f.getWeigth(i, j);
                    double wei_i = f.getWeigthInv(i, j);


                    String t1 = l.getEntry(i).getValue();
                    String t2 = l.getEntry(j).getValue();
                    

                    
                    out.print(t1 + ' ' + t2);
                    out.print(";");
                    out.print(sig);
                    out.print(";");
                    out.print(wei);
                    out.print(";");
                    out.print(sig == 0 ? 0d : wei / sig);
                    out.print(";");
                    out.print(wei == 0 ? 0d : sig / wei);
                    out.print(";");
                    out.print(wei-wei_i);
                    out.print(";");
                    out.print(Math.abs(wei-wei_i));
                    out.print("\n");

                    //data.add(row);
                }
            }
        } else {
            logger.debug("Only " + t1Int);
            size = lex.size();
            for (Integer j : lex) {
                c++;
                int p = (int) (100 * ((double) c / (double) size));
                jProgressBar1.setValue(p);
                jProgressBar1.setToolTipText(p + "%");



                String t1 = l.getEntry(t1Int).getValue();
                String t2 = l.getEntry(j).getValue();

                double sig = f.getSignificance(t1Int, j);
                if (sig > tres) {
                    double wei = f.getWeigth(t1Int, j);
                    double wei_i = f.getWeigthInv(t1Int, j);
                    

                    out.print(t1 + ' ' + t2);
                    out.print(";");
                    out.print(sig);
                    out.print(";");
                    out.print(wei);
                    out.print(";");
                    out.print(sig == 0 ? 0d : wei / sig);
                    out.print(";");
                    out.print(wei == 0 ? 0d : sig / wei);
                    out.print(";");
                    out.print(wei-wei_i);
                    out.print(";");
                    out.print(Math.abs(wei-wei_i));
                    out.print("\n");

                    
                }
                // inverse
/*
                sig = f.getSignificance(j, t1Int);
                if (sig > tres) {
                    double wei = f.getWeigth(j, t1Int);
                    double wei_i = f.getWeigthInv(j, t1Int);
                    Vector<Object> row = new Vector<Object>();
                    row.add(t2 + ' ' + t1);
                    row.add(sig);
                    row.add(wei);
                    row.add(sig == 0 ? 0d : wei / sig);
                    row.add(wei == 0 ? 0d : sig / wei);


                    row.add(wei-wei_i);
                    row.add(Math.abs(wei-wei_i));

                    data.add(row);
                }
 *
 */

            }
        }

       

        Vector<String> columns = new Vector<String>();

        columns.add("pair");
        columns.add("significance");
        columns.add("weight");
        columns.add("significance/weight");
        columns.add("weight/significance");
        columns.add("delta_w");
        columns.add("abs_delta_w");

        out.close();
    }
}
